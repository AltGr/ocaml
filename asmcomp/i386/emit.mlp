# 2 "asmcomp/i386/emit.mlp"
(***********************************************************************)
(*                                                                     *)
(*                                OCaml                                *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1996 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the Q Public License version 1.0.               *)
(*                                                                     *)
(***********************************************************************)

(* Emission of Intel 386 assembly code *)

open Misc
open Cmm
open Arch
open Proc
open Reg
open Mach
open Linearize
open Emitaux
open Intel_proc

let _r r = Reg (register r)
let _label s = emit (NewLabel (s, DWORD))
let _mem offset reg = Mem(NO, register reg, 1, NoBase, offset)

(* On win32/win64, some memory references need to specify the size of
   the operand in 'pref' *)
let _mem_ptr pref offset reg = Mem(pref, register reg, 1, NoBase, offset)

(*
module Emitter = MakeEmitter(struct

    type reg = register32
    let arch64 = false
    let bprint_instr =
      match system with
      | S_win32 | S_win64 -> Intel_masm.bprint_instr
      | _ -> Intel_gas.bprint_instr
    let string_of_register = string_of_register32
    let word_size = DWORD
    let passes = Intel_proc.assembler_passes

  end)

open Emitter
*)

(* CFI directives *)

let is_cfi_enabled () =
  Config.asm_cfi_supported

let cfi_startproc () =
  if is_cfi_enabled () then
    _specific ".cfi_startproc"

let cfi_endproc () =
  if is_cfi_enabled () then
    _specific ".cfi_endproc"

let cfi_adjust_cfa_offset n =
  if is_cfi_enabled () then
  begin
    _specific (Printf.sprintf ".cfi_adjust_cfa_offset\t%d" n)
  end

let emit_debug_info dbg =
  if system <> S_win32 then
  emit_debug_info_gen dbg
    (fun file_num file_name ->
      _specific
          (Printf.sprintf ".file\t%d\t\"%s\""
             file_num (Intel_proc.string_of_string_literal file_name))
    )
    (fun file_num line ->
      _specific
          (Printf.sprintf ".loc\t%d\t%d"
             file_num line)
    )

(* Tradeoff between code size and code speed *)

let fastcode_flag = ref true

let stack_offset = ref 0

(* Layout of the stack frame *)

let frame_size () =                     (* includes return address *)
  let sz =
    !stack_offset + 4 * num_stack_slots.(0) + 8 * num_stack_slots.(1) + 4
  in Misc.align sz stack_alignment

let slot_offset loc cl =
  match loc with
    Incoming n ->
      assert (n >= 0);
      frame_size() + n
  | Local n ->
      if cl = 0
      then !stack_offset + n * 4
      else !stack_offset + num_stack_slots.(0) * 4 + n * 8
  | Outgoing n ->
      assert (n >= 0);
      n

(* Record symbols used and defined - at the end generate extern for those
   used but not defined *)

let symbols_defined = ref StringSet.empty
let symbols_used = ref StringSet.empty

let add_def_symbol s =
  symbols_defined := StringSet.add s !symbols_defined

let add_used_symbol s =
  symbols_used := StringSet.add s !symbols_used

let trap_frame_size = Misc.align 8 stack_alignment

(* Prefixing of symbols with "_" *)

let symbol_prefix =
  match system with
    S_linux_elf -> ""
  | S_bsd_elf -> ""
  | S_solaris -> ""
  | S_beos -> ""
  | S_gnu -> ""
  | _ -> "_" (* win32 & others *)

let emit_symbol s =
  string_of_symbol symbol_prefix s

let emit_call s =
  _call (  _l (emit_symbol s)  )

(* Output a label *)

let label_prefix =
  match system with
    S_linux_elf -> ".L"
  | S_bsd_elf -> ".L"
  | S_solaris -> ".L"
  | S_beos -> ".L"
  | S_gnu -> ".L"
  | _ -> "L"

let emit_label lbl =
  Printf.sprintf "%s%d" label_prefix lbl

let emit_data_label lbl =
  Printf.sprintf "%sd%d" label_prefix lbl

(* MacOSX has its own way to reference symbols potentially defined in
   shared objects *)


(* Output a .align directive.
   The numerical argument to .align is log2 of alignment size, except
   under ELF, where it is the alignment size... *)

let emit_align =
  match system with
    S_linux_elf | S_bsd_elf | S_solaris | S_beos | S_cygwin
  | S_mingw | S_gnu | S_win32 ->
      (fun n -> _align n)
  | _ ->
      (fun n -> _align (Misc.log2 n))

let emit_Llabel fallthrough lbl =
  if not fallthrough && !fastcode_flag then
    emit_align 16 ;
  _llabel (emit_label lbl)

(* Output a pseudo-register *)

let int_reg_name =  [| EAX; EBX; ECX; EDX; ESI; EDI; EBP  |]

let float_reg_name = [| TOS |]

let register_name r =
  if r < 100 then _r (int_reg_name.(r))
  else Regf (float_reg_name.(r - 100))

let emit_reg = function
    { loc = Reg r } -> register_name r
  | { loc = Stack(Incoming n | Outgoing n) } when n < 0 ->
    LabelRel(NO, emit_symbol "caml_extra_params", n + 64)
  | { loc = Stack s; typ = Float } as r ->
      let ofs = slot_offset s (register_class r) in
      _mem_ptr REAL8 ofs ESP
  | { loc = Stack s } as r ->
      let ofs = slot_offset s (register_class r) in
      _mem_ptr DWORD ofs ESP
  | { loc = Unknown } ->
      fatal_error "Emit_i386.emit_reg"

(* Output a reference to the lower 8 bits or lower 16 bits of a register *)

let reg_low_byte_name = [|  AL; BL; CL; DL |]
let reg_low_half_name = [| AX; BX; CX; DX; SI; DI; BP |]

let emit_reg8 r =
  match r.loc with
    Reg r when r < 4 -> Reg8 (reg_low_byte_name.(r))
  | _ -> fatal_error "Emit_i386.emit_reg8"

let emit_reg16 r =
  match r.loc with
    Reg r when r < 7 -> Reg16 (reg_low_half_name.(r))
  | _ -> fatal_error "Emit_i386.emit_reg16"

let emit_reg32 = function
    | { loc = Reg.Reg r } -> int_reg_name.(r)
    | _ -> assert false

(* Output an addressing mode *)

let emit_addressing addr pref r n =
  match addr with
    Ibased(s, d) ->
    add_used_symbol s;
    LabelRel( pref, emit_symbol s, d)
  | Iindexed d ->
    _mem_ptr pref d (emit_reg32 r.(n))
  | Iindexed2 d ->
    Mem(pref, register (emit_reg32 r.(n+1)), 1,
      BaseReg (register (emit_reg32 r.(n))), d)
  | Iscaled(2, d) ->
    Mem(pref, register (emit_reg32 r.(n)), 1,
      BaseReg (register (emit_reg32 r.(n))), d)
  | Iscaled(scale, d) ->
    Mem(pref, register (emit_reg32 r.(n)), scale, NoBase,  d)
  | Iindexed2scaled(scale, d) ->
    Mem(pref, register (emit_reg32 r.(n+1)), scale,
      BaseReg (register (emit_reg32 r.(n))), d)

(* Record live pointers at call points *)

let record_frame_label live dbg =
  let lbl = new_label() in
  let live_offset = ref [] in
  Reg.Set.iter
    (function
        {typ = Addr; loc = Reg r} ->
          live_offset := ((r lsl 1) + 1) :: !live_offset
      | {typ = Addr; loc = Stack s} as reg ->
          live_offset := slot_offset s (register_class reg) :: !live_offset
      | _ -> ())
    live;
  frame_descriptors :=
    { fd_lbl = lbl;
      fd_frame_size = frame_size();
      fd_live_offset = !live_offset;
      fd_debuginfo = dbg } :: !frame_descriptors;
  lbl

let record_frame live dbg =
  let lbl = record_frame_label live dbg in
  _llabel (emit_label lbl)

(* Record calls to the GC -- we've moved them out of the way *)

type gc_call =
  { gc_lbl: label;                      (* Entry label *)
    gc_return_lbl: label;               (* Where to branch after GC *)
    gc_frame: label }                   (* Label of frame descriptor *)

let call_gc_sites = ref ([] : gc_call list)

let emit_call_gc gc =
  _llabel (emit_label gc.gc_lbl);
  emit_call "caml_call_gc";
  _llabel (emit_label gc.gc_frame);
  _jmp (  _l (emit_label gc.gc_return_lbl) )

(* Record calls to caml_ml_array_bound_error.
   In -g mode, we maintain one call to caml_ml_array_bound_error
   per bound check site.  Without -g, we can share a single call. *)

type bound_error_call =
  { bd_lbl: label;                      (* Entry label *)
    bd_frame: label }                   (* Label of frame descriptor *)

let bound_error_sites = ref ([] : bound_error_call list)
let bound_error_call = ref 0

let bound_error_label dbg =
  if !Clflags.debug then begin
    let lbl_bound_error = new_label() in
    let lbl_frame = record_frame_label Reg.Set.empty dbg in
    bound_error_sites :=
     { bd_lbl = lbl_bound_error; bd_frame = lbl_frame } :: !bound_error_sites;
   lbl_bound_error
 end else begin
   if !bound_error_call = 0 then bound_error_call := new_label();
   !bound_error_call
 end

let emit_call_bound_error bd =
  _llabel (emit_label bd.bd_lbl);
  emit_call "caml_ml_array_bound_error";
  _llabel (emit_label bd.bd_frame)

let emit_call_bound_errors () =
  List.iter emit_call_bound_error !bound_error_sites;
  if !bound_error_call > 0 then begin
    _llabel (emit_label !bound_error_call);
    emit_call "caml_ml_array_bound_error"
  end

(* Names for instructions *)

let instr_for_intop = function
    Iadd -> _addl
  | Isub -> _subl
  | Imul -> (fun (arg1,arg2) ->  _imull (arg1, Some arg2))
  | Iand -> _andl
  | Ior -> _orl
  | Ixor -> _xorl
  | Ilsl -> _sall
  | Ilsr -> _shrl
  | Iasr -> _sarl
  | _ -> fatal_error "Emit_i386: instr_for_intop"

let instr_for_floatop = function
    Inegf -> _fchs
  | Iabsf -> _fabs
  | Iaddf -> _faddl
  | Isubf -> _fsubl
  | Imulf -> _fmull
  | Idivf -> _fdivl
  | Ispecific Isubfrev -> _fsubrl
  | Ispecific Idivfrev -> _fdivrl
  | _ -> fatal_error "Emit_i386: instr_for_floatop"

let instr_for_floatop_reversed = function
    Iaddf -> _faddl
  | Isubf -> _fsubrl
  | Imulf -> _fmull
  | Idivf -> _fdivrl
  | Ispecific Isubfrev -> _fsubl
  | Ispecific Idivfrev -> _fdivl
  | _ -> fatal_error "Emit_i386: instr_for_floatop_reversed"

let instr_for_floatop_pop = function
    Iaddf -> _faddp
  | Isubf -> _fsubp
  | Imulf -> _fmulp
  | Idivf -> _fdivp
  | Ispecific Isubfrev -> _fsubrp
  | Ispecific Idivfrev -> _fdivrp
  | _ -> fatal_error "Emit_i386: instr_for_floatop_pop"

let instr_for_floatarithmem double = function
    Ifloatadd -> if double then _faddl else _fadds
  | Ifloatsub -> if double then _fsubl else _fsubs
  | Ifloatsubrev -> if double then _fsubrl else _fsubrs
  | Ifloatmul -> if double then _fmull else _fmuls
  | Ifloatdiv -> if double then _fdivl else _fdivs
  | Ifloatdivrev -> if double then _fdivrl else _fdivrs

let name_for_cond_branch = function
    Isigned Ceq -> E     | Isigned Cne -> NE
  | Isigned Cle -> LE     | Isigned Cgt -> G
  | Isigned Clt -> L     | Isigned Cge -> GE
  | Iunsigned Ceq -> E   | Iunsigned Cne -> NE
  | Iunsigned Cle -> BE  | Iunsigned Cgt -> A
  | Iunsigned Clt -> B  | Iunsigned Cge -> AE

(* Output an = 0 or <> 0 test. *)

let output_test_zero arg =
  match arg.loc with
    Reg.Reg r -> _testl  (   emit_reg arg, emit_reg arg (* rev *)  )
  | _  -> _cmpl  (   emit_int 0, emit_reg arg (* rev *)  )

(* Deallocate the stack frame before a return or tail call *)

let output_epilogue f =
  let n = frame_size() - 4 in
  if n > 0 then
    begin
      _addl ( _int n, _r ESP );
      cfi_adjust_cfa_offset (-n);
      f ();
    (* reset CFA back cause function body may continue *)
      cfi_adjust_cfa_offset n
  end
  else
    f ()

(* Determine if the given register is the top of the floating-point stack *)

let is_tos = function { loc = Reg _; typ = Float } -> true | _ -> false

(* Emit the code for a floating-point comparison *)

let emit_float_test cmp neg arg lbl =
  let actual_cmp =
    match (is_tos arg.(0), is_tos arg.(1)) with
      (true, true) ->
      (* both args on top of FP stack *)
      _fcompp ();
      cmp
    | (true, false) ->
      (* first arg on top of FP stack *)
      _fcompl (  emit_reg arg.(1)  );
      cmp
    | (false, true) ->
      (* second arg on top of FP stack *)
      _fcompl (  emit_reg arg.(0)  );
      Cmm.swap_comparison cmp
    | (false, false) ->
      _fldl    (  emit_reg arg.(0)  );
      _fcompl  (  emit_reg arg.(1)  );
      cmp
  in
  _fnstsw (  Reg16 AX  );
  begin match actual_cmp with
    Ceq ->
      if neg then begin
      _andb (   _int 68 , Reg8 AH  );
      _xorb (   _int 64 , Reg8 AH   );
      _jne
      end else begin
      _andb ( _int 69 , Reg8 AH   );
      _cmpb ( _int 64 , Reg8 AH   );
      _je
      end
  | Cne ->
      if neg then begin
        _andb (   _int 69 , Reg8 AH   );
        _cmpb (   _int 64 , Reg8 AH   );
        _je
      end else begin
        _andb (   _int 68 , Reg8 AH   );
        _xorb (   _int 64 , Reg8 AH   );
        _jne
      end
  | Cle ->
      _andb (   _int 69 , Reg8 AH   );
      _decb (  Reg8 AH  );
      _cmpb (   _int 64 , Reg8 AH   );
      if neg
      then _jae
      else _jb
  | Cge ->
      _andb (   _int 5 , Reg8 AH   );
      if neg
      then _jne
      else _je
  | Clt ->
      _andb (   _int 69 , Reg8 AH   );
      _cmpb (   _int 1 , Reg8 AH   );
      if neg
      then _jne
      else _je
  | Cgt ->
      _andb (   _int 69 , Reg8 AH   );
      if neg
      then _jne
      else _je
  end
  (  _l (emit_label lbl)  )

(* Emit a Ifloatspecial instruction *)

let emit_floatspecial = function
    "atan"  -> _fld1 (  ); _fpatan (  )
  | "atan2" -> _fpatan (  )
  | "cos"   -> _fcos (  )
  | "log"   -> _fldln2 (  ); _fxch None; _fyl2x (  )
  | "log10" -> _fldlg2 (  ); _fxch None; _fyl2x (  )
  | "sin"   -> _fsin (  )
  | "sqrt"  -> _fsqrt (  )
  | "tan"   -> _fptan (  ); _fstp (  Regf (ST 0)  ) (* %st(0) *)
  | _ -> assert false

(* Floating-point constants *)

let float_constants = ref StringMap.empty

let add_float_constant cst =
  try
    StringMap.find cst !float_constants
  with
    Not_found ->
      let lbl = new_label() in
      float_constants := StringMap.add cst lbl !float_constants;
      lbl

let emit_float64_split_directive f =
  let x = Int64.bits_of_float (float_of_string f) in
  let lo = Int64.logand x 0xFFFF_FFFFL
  and hi = Int64.shift_right_logical x 32 in
  _long (Const64 (if Arch.big_endian then hi else lo));
  _long (Const64 (if Arch.big_endian then lo else hi));
  ()

let emit_float_constant cst lbl =
  _label (emit_label lbl);
  emit_float64_split_directive cst

(* Output the assembly code for an instruction *)

(* Name of current function *)
let function_name = ref ""
(* Entry point for tail recursive calls *)
let tailrec_entry_point = ref 0
(* Label of trap for out-of-range accesses *)
let range_check_trap = ref 0
(* Record references to external C functions (for MacOSX) *)
let external_symbols_direct = ref StringSet.empty
let external_symbols_indirect = ref StringSet.empty

let emit_instr fallthrough i =
  emit_debug_info i.dbg;
  match i.desc with
    Lend -> ()
  | Lop(Imove | Ispill | Ireload) ->
    let src = i.arg.(0) and dst = i.res.(0) in
    if src.loc <> dst.loc then begin
      if src.typ = Float then
        if is_tos src then
          _fstpl (  emit_reg dst  )
        else if is_tos dst then
          _fldl (  emit_reg src  )
        else begin
          _fldl  (  emit_reg src  );
          _fstpl (  emit_reg dst  )
        end
      else
        _movl (   emit_reg src , emit_reg dst   )
    end
  | Lop(Iconst_int n) ->
    if n = 0n then begin
      match i.res.(0).loc with
        Reg n -> _xorl (   emit_reg i.res.(0) , emit_reg i.res.(0)   )
      | _     -> _movl (   emit_int 0 , emit_reg i.res.(0)   )
    end else
      _movl (   emit_nativeint n , emit_reg i.res.(0)   )
  | Lop(Iconst_float s) ->
    begin match Int64.bits_of_float (float_of_string s) with
      | 0x0000_0000_0000_0000L ->       (* +0.0 *)
        _fldz (  )
      | 0x8000_0000_0000_0000L ->       (* -0.0 *)
        _fldz (  ); _fchs None
      | 0x3FF0_0000_0000_0000L ->       (*  1.0 *)
        _fld1 (  )
      | 0xBFF0_0000_0000_0000L ->       (* -1.0 *)
        _fld1 (  ); _fchs None
      | _ ->
        let lbl = add_float_constant s in
        _fldl (  _l (emit_label lbl)  )
    end
  | Lop(Iconst_symbol s) ->
    add_used_symbol s;
    _movl (   _offset (emit_symbol s) , emit_reg i.res.(0)   )
  | Lop(Icall_ind) ->
    _call ( emit_reg i.arg.(0) );
    record_frame i.live i.dbg
  | Lop(Icall_imm s) ->
    add_used_symbol s;
    _call (  _l (emit_symbol s)  );
    record_frame i.live i.dbg
  | Lop(Itailcall_ind) ->
    output_epilogue begin fun () ->
      _jmp (  emit_reg i.arg.(0)  )
    end
  | Lop(Itailcall_imm s) ->
    if s = !function_name then
      _jmp (  _l (emit_label !tailrec_entry_point)  )
    else begin
      output_epilogue begin fun () ->
        add_used_symbol s;
        _jmp (  _l (emit_symbol s)  )
      end
    end
  | Lop(Iextcall(s, alloc)) ->
    add_used_symbol s;
    if alloc then begin
      if system <> S_macosx then
        _movl (   _offset (emit_symbol s) , _r EAX   )
      else begin
        external_symbols_indirect :=
          StringSet.add s !external_symbols_indirect;
        _movl (   _l (Printf.sprintf "L%s$non_lazy_ptr"
                      (emit_symbol s)) , _r EAX   )
      end;
      emit_call "caml_c_call";
      record_frame i.live i.dbg
    end else begin
      if system <> S_macosx then
        emit_call s
      else begin
        external_symbols_direct :=
          StringSet.add s !external_symbols_direct;
        _call (  _l (Printf.sprintf "L%s$stub" (emit_symbol s))  )
      end
    end
  | Lop(Istackoffset n) ->
    if n < 0
    then _addl (   emit_int(-n) , _r ESP   )
    else _subl (   emit_int(n) , _r ESP   );
    cfi_adjust_cfa_offset n;
    stack_offset := !stack_offset + n
  | Lop(Iload(chunk, addr)) ->
    let dest = i.res.(0) in
    begin match chunk with
      | Word | Thirtytwo_signed | Thirtytwo_unsigned ->
        _movl (   emit_addressing addr DWORD i.arg 0 , emit_reg dest   )
      | Byte_unsigned ->
        _movzbl (   emit_addressing addr BYTE i.arg 0 , emit_reg dest   )
      | Byte_signed ->
        _movsbl (   emit_addressing addr BYTE i.arg 0 , emit_reg dest   )
      | Sixteen_unsigned ->
        _movzwl (   emit_addressing addr WORD i.arg 0 , emit_reg dest   )
      | Sixteen_signed ->
        _movswl (   emit_addressing addr WORD i.arg 0 , emit_reg dest   )
      | Single ->
        _flds (  emit_addressing addr REAL4 i.arg 0  )
      | Double | Double_u ->
        _fldl (  emit_addressing addr REAL8 i.arg 0  )
    end
  | Lop(Istore(chunk, addr)) ->
    begin match chunk with
      | Word | Thirtytwo_signed | Thirtytwo_unsigned ->
        _movl (   emit_reg i.arg.(0) , emit_addressing addr DWORD i.arg 1   )
      | Byte_unsigned | Byte_signed ->
        _movb (   emit_reg8 i.arg.(0) , emit_addressing addr BYTE i.arg 1   )
      | Sixteen_unsigned | Sixteen_signed ->
        _movw (   emit_reg16 i.arg.(0) , emit_addressing addr WORD i.arg 1   )
      | Single ->
        if is_tos i.arg.(0) then
          _fstps (  emit_addressing addr REAL4 i.arg 1  )
        else begin
          _fldl (  emit_reg i.arg.(0)  );
          _fstps (  emit_addressing addr REAL4 i.arg 1  )
        end
      | Double | Double_u ->
        if is_tos i.arg.(0) then
          _fstpl (  emit_addressing addr REAL8 i.arg 1  )
        else begin
          _fldl (  emit_reg i.arg.(0)  );
          _fstpl (  emit_addressing addr REAL8 i.arg 1  )
        end
    end
  | Lop(Ialloc n) ->
    if !fastcode_flag then begin
      let lbl_redo = new_label() in
      _llabel (emit_label lbl_redo);
      _movl (   _l (emit_symbol "caml_young_ptr") , _r EAX   );
      _subl (   emit_int n , _r EAX   );
      _movl (   _r EAX , _l (emit_symbol "caml_young_ptr")   );
      _cmpl (   _l (emit_symbol "caml_young_limit") , _r EAX   );
      let lbl_call_gc = new_label() in
      let lbl_frame = record_frame_label i.live Debuginfo.none in
      _jb (  _l (emit_label lbl_call_gc)  );
      _leal  (   _mem 4 EAX , emit_reg i.res.(0)   );
      call_gc_sites :=
        { gc_lbl = lbl_call_gc;
          gc_return_lbl = lbl_redo;
          gc_frame = lbl_frame } :: !call_gc_sites
    end else begin
      begin match n with
          8  -> emit_call "caml_alloc1"
        | 12 -> emit_call "caml_alloc2"
        | 16 -> emit_call "caml_alloc3"
        | _  ->
          _movl (   emit_int n , _r EAX   );
          emit_call "caml_allocN"
      end;
      record_frame i.live Debuginfo.none;
      _leal (  _mem 4 EAX , emit_reg i.res.(0)   )
    end
  | Lop(Iintop(Icomp cmp)) ->
    _cmpl (   emit_reg i.arg.(1) , emit_reg i.arg.(0)   );
    let b = name_for_cond_branch cmp in
    _set b (  Reg8 AL  );
    _movzbl (   Reg8 AL , emit_reg i.res.(0)   );
  | Lop(Iintop_imm(Icomp cmp, n)) ->
    _cmpl (   emit_int n , emit_reg i.arg.(0)   );
    let b = name_for_cond_branch cmp in
    _set b (  Reg8 AL  );
    _movzbl (   Reg8 AL , emit_reg i.res.(0)   )
  | Lop(Iintop Icheckbound) ->
    let lbl = bound_error_label i.dbg in
    _cmpl (   emit_reg i.arg.(1) , emit_reg i.arg.(0)   );
    _jbe (  _l ( emit_label lbl )  )
  | Lop(Iintop_imm(Icheckbound, n)) ->
    let lbl = bound_error_label i.dbg in
    _cmpl (   emit_int n , emit_reg i.arg.(0)   );
    _jbe (  _l (emit_label lbl)  )
  | Lop(Iintop(Idiv | Imod)) ->
    _cltd (  );
    _idivl (  emit_reg i.arg.(1)  )
  | Lop(Iintop(Ilsl | Ilsr | Iasr as op)) ->
    (* We have i.arg.(0) = i.res.(0) and i.arg.(1) = %ecx *)
    instr_for_intop op (   Reg8 CL , emit_reg i.res.(0)   )
  | Lop(Iintop Imulh) ->
    _imull (  emit_reg i.arg.(1), None )
  | Lop(Iintop op) ->
    (* We have i.arg.(0) = i.res.(0) *)
    instr_for_intop op (   emit_reg i.arg.(1) , emit_reg i.res.(0)   )
  | Lop(Iintop_imm(Iadd, n)) when i.arg.(0).loc <> i.res.(0).loc ->
    _leal (  _mem n (emit_reg32 i.arg.(0)), emit_reg i.res.(0)   )
  | Lop(Iintop_imm(Iadd, 1) | Iintop_imm(Isub, -1)) ->
    _incl (  emit_reg i.res.(0)  )
  | Lop(Iintop_imm(Iadd, -1) | Iintop_imm(Isub, 1)) ->
    _decl (  emit_reg i.res.(0)  )
  | Lop(Iintop_imm(op, n)) ->
    (* We have i.arg.(0) = i.res.(0) *)
    instr_for_intop op (   emit_int n , emit_reg i.res.(0)   )
  | Lop(Inegf | Iabsf as floatop) ->
    if not (is_tos i.arg.(0)) then
      _fldl (  emit_reg i.arg.(0)  );
    instr_for_floatop floatop None
  | Lop(Iaddf | Isubf | Imulf | Idivf | Ispecific(Isubfrev | Idivfrev)
      as floatop) ->
    begin match (is_tos i.arg.(0), is_tos i.arg.(1)) with
        (true, true) ->
        (* both operands on top of FP stack *)
        instr_for_floatop_pop floatop (   Regf (ST 0) , Regf (ST 1)   )
      | (true, false) ->
        (* first operand on stack *)
        instr_for_floatop floatop (Some (  emit_reg i.arg.(1)  ))
      | (false, true) ->
        (* second operand on stack *)
        instr_for_floatop_reversed floatop (Some (  emit_reg i.arg.(0)  ))
      | (false, false) ->
        (* both operands in memory *)
        _fldl (  emit_reg i.arg.(0)  );
        instr_for_floatop floatop (Some (  emit_reg i.arg.(1)  ))
    end
  | Lop(Ifloatofint) ->
    begin match i.arg.(0).loc with
        Stack s ->
        _fildl (  emit_reg i.arg.(0)  )
      | _ ->
        _pushl (  emit_reg i.arg.(0)  );
        _fildl (  _mem_ptr DWORD 0 ESP  );
        _addl (   emit_int 4 , _r ESP   )
    end
  | Lop(Iintoffloat) ->
    if not (is_tos i.arg.(0)) then
      _fldl (  emit_reg i.arg.(0)  );
    stack_offset := !stack_offset - 8;
    _subl (   emit_int 8 , _r ESP   );
    cfi_adjust_cfa_offset 8;
    _fnstcw (  _mem 4 ESP  );
    _movw (   _mem 4 ESP , Reg16 AX   );
    _movb (   emit_int 12 , Reg8 AH   );
    _movw (   Reg16 AX , _mem 0 ESP   );
    _fldcw (  _mem 0 ESP  );
    begin match i.res.(0).loc with
        Stack s ->
        _fistpl (  emit_reg i.res.(0)  )
      | _ ->
        _fistpl (  _mem_ptr DWORD 0 ESP  );
        _movl (   _mem 0 ESP , emit_reg i.res.(0)   )
    end;
    _fldcw (  _mem 4 ESP  );
    _addl (   emit_int 8 , _r ESP   );
    cfi_adjust_cfa_offset (-8);
    stack_offset := !stack_offset + 8
  | Lop(Ispecific(Ilea addr)) ->
    _leal (   emit_addressing addr DWORD i.arg 0 , emit_reg i.res.(0)   )
  | Lop(Ispecific(Istore_int(n, addr))) ->
    _movl (   emit_nativeint n , emit_addressing addr DWORD i.arg 0   )
  | Lop(Ispecific(Istore_symbol(s, addr))) ->
    add_used_symbol s;
    _movl (   _offset (emit_symbol s) , emit_addressing addr DWORD i.arg 0   )
  | Lop(Ispecific(Ioffset_loc(n, addr))) ->
    _addl (    _int n , emit_addressing addr DWORD i.arg 0   )
  | Lop(Ispecific(Ipush)) ->
    (* Push arguments in reverse order *)
    for n = Array.length i.arg - 1 downto 0 do
      let r = i.arg.(n) in
      match r with
        {loc = Reg _; typ = Float} ->
        _subl (   _int 8 , _r ESP   );
        cfi_adjust_cfa_offset 8;
        _fstpl (  _mem_ptr REAL8 0 ESP  );
        stack_offset := !stack_offset + 8
      | {loc = Stack sl; typ = Float} ->
        let ofs = slot_offset sl 1 in
        _pushl (  _mem_ptr DWORD (ofs + 4) ESP  );
        _pushl (  _mem_ptr DWORD (ofs + 4) ESP  );
        cfi_adjust_cfa_offset 8;
        stack_offset := !stack_offset + 8
      | _ ->
        _pushl (  emit_reg r  );
        cfi_adjust_cfa_offset 4;
        stack_offset := !stack_offset + 4
    done
  | Lop(Ispecific(Ipush_int n)) ->
    _pushl (  emit_nativeint n  );
    cfi_adjust_cfa_offset 4;
    stack_offset := !stack_offset + 4
  | Lop(Ispecific(Ipush_symbol s)) ->
    add_used_symbol s;
    _pushl (  _offset (emit_symbol s)  );
    cfi_adjust_cfa_offset 4;
    stack_offset := !stack_offset + 4
  | Lop(Ispecific(Ipush_load addr)) ->
    _pushl (  emit_addressing addr DWORD i.arg 0  );
    cfi_adjust_cfa_offset 4;
    stack_offset := !stack_offset + 4
  | Lop(Ispecific(Ipush_load_float addr)) ->
    _pushl (  emit_addressing (offset_addressing addr 4) DWORD i.arg 0  );
    _pushl (  emit_addressing addr DWORD i.arg 0  );
    cfi_adjust_cfa_offset 8;
    stack_offset := !stack_offset + 8
  | Lop(Ispecific(Ifloatarithmem(double, op, addr))) ->
    if not (is_tos i.arg.(0)) then
      _fldl (  emit_reg i.arg.(0)  );
    instr_for_floatarithmem double op ( Some (
      emit_addressing addr
        (if double then REAL8 else REAL4) i.arg 1  ))
  | Lop(Ispecific(Ifloatspecial s)) ->
    (* Push args on float stack if necessary *)
    for k = 0 to Array.length i.arg - 1 do
      if not (is_tos i.arg.(k)) then _fldl (  emit_reg i.arg.(k)  )
    done;
    (* Fix-up for binary instrs whose args were swapped *)
    if Array.length i.arg = 2 && is_tos i.arg.(1) then
      _fxch (Some (  _st 1  ));
    emit_floatspecial s
  | Lreloadretaddr ->
    ()
  | Lreturn ->
    output_epilogue begin fun () ->
      _ret (  )
    end
  | Llabel lbl ->
    emit_Llabel fallthrough lbl
  | Lbranch lbl ->
    _jmp (  _l(emit_label lbl)  )
  | Lcondbranch(tst, lbl) ->
    begin match tst with
        Itruetest ->
        output_test_zero i.arg.(0);
        _jne (  _l (emit_label lbl)  );
      | Ifalsetest ->
        output_test_zero i.arg.(0);
        _je (  _l (emit_label lbl)  )
      | Iinttest cmp ->
        _cmpl (  emit_reg i.arg.(1) , emit_reg i.arg.(0)    );
        let b = name_for_cond_branch cmp in
        _j b (  _l (emit_label lbl)  )
      | Iinttest_imm((Isigned Ceq | Isigned Cne |
                      Iunsigned Ceq | Iunsigned Cne) as cmp, 0) ->
        output_test_zero i.arg.(0);
        let b = name_for_cond_branch cmp in
        _j b (  _l (emit_label lbl)  )
      | Iinttest_imm(cmp, n) ->
        _cmpl (    _int n , emit_reg i.arg.(0)   );
        let b = name_for_cond_branch cmp in
        _j b (  _l (emit_label lbl)  )
      | Ifloattest(cmp, neg) ->
        emit_float_test cmp neg i.arg lbl
      | Ioddtest ->
        _testl (   _int 1 , emit_reg i.arg.(0)   );
        _jne (  _l (emit_label lbl)  )
      | Ieventest ->
        _testl (   _int 1 , emit_reg i.arg.(0)   );
        _je (  _l (emit_label lbl)  )
    end
  | Lcondbranch3(lbl0, lbl1, lbl2) ->
    _cmpl (   _int 1 , emit_reg i.arg.(0)   );
    begin match lbl0 with
        None -> ()
      | Some lbl -> _jb (  _l (emit_label lbl)  )
    end;
    begin match lbl1 with
        None -> ()
      | Some lbl -> _je (  _l (emit_label lbl)  )
    end;
    begin match lbl2 with
        None -> ()
      | Some lbl -> _jg (  _l (emit_label lbl)  )
    end
  | Lswitch jumptbl ->
    let lbl = new_label() in
    _jmp (  Mem(NO, register (emit_reg32 i.arg.(0)), 4,
              BaseSymbol (emit_label lbl), 0) );
    _data ();
    emit (NewLabel (emit_label lbl, DWORD));
    for i = 0 to Array.length jumptbl - 1 do
      _long (ConstLabel (emit_label jumptbl.(i) ))
    done;
    _text ()
  | Lsetuptrap lbl ->
    _call (  _l (emit_label lbl)  )
  | Lpushtrap ->
    if trap_frame_size > 8 then
      _subl (   _int (trap_frame_size - 8) , _r ESP   );
    _pushl (  _l (emit_symbol "caml_exception_pointer" )  );
    cfi_adjust_cfa_offset trap_frame_size;
    _movl (   _r ESP , _l (emit_symbol "caml_exception_pointer")   );
    stack_offset := !stack_offset + trap_frame_size
  | Lpoptrap ->
    _popl (  _l (emit_symbol "caml_exception_pointer")  );
    _addl (   _int (trap_frame_size - 4) , _r ESP   );
    cfi_adjust_cfa_offset (-trap_frame_size);
    stack_offset := !stack_offset - trap_frame_size
  | Lraise k  ->
    begin match !Clflags.debug, k with
      | true, Lambda.Raise_regular ->
        emit_call "caml_raise_exn";
        record_frame Reg.Set.empty i.dbg
      | true, Lambda.Raise_reraise ->
        emit_call "caml_reraise_exn";
        record_frame Reg.Set.empty i.dbg
      | false, _
      | true, Lambda.Raise_notrace ->
        _movl (   _l (emit_symbol "caml_exception_pointer") , _r ESP   );
        _popl (  _l (emit_symbol "caml_exception_pointer")  );
        if trap_frame_size > 8 then
          _addl (   _int (trap_frame_size - 8) , _r ESP   );
        _ret (  )
    end

let rec emit_all fallthrough i =
  match i.desc with
  |  Lend -> ()
  | _ ->
      emit_instr fallthrough i;
      emit_all
        (system = S_win32 || Linearize.has_fallthrough i.desc)
        i.next

(* Emission of external symbol references (for MacOSX) *)

let emit_external_symbol_direct s =
  _label (Printf.sprintf "L%s$stub" (emit_symbol s));
  _specific (Printf.sprintf ".indirect_symbol %s" (emit_symbol s));
  _hlt (  ); _hlt (  ); _hlt (  ); _hlt (  ) ; _hlt (  )

let emit_external_symbol_indirect s =
  _label (Printf.sprintf "L%s$non_lazy_ptr" ( emit_symbol s ) );
  _specific (Printf.sprintf ".indirect_symbol %s" (emit_symbol s));
  _long (ConstInt 0)

let emit_external_symbols () =
  _specific ".section __IMPORT,__pointers,non_lazy_symbol_pointers";
  StringSet.iter emit_external_symbol_indirect !external_symbols_indirect;
  external_symbols_indirect := StringSet.empty;
  _specific ".section __IMPORT,__jump_table,symbol_stubs,self_modifying_code+pure_instructions,5";
  StringSet.iter emit_external_symbol_direct !external_symbols_direct;
  external_symbols_direct := StringSet.empty;
  if !Clflags.gprofile then begin
    _label "Lmcount$stub";
    _specific ".indirect_symbol mcount";
    _hlt (  ); _hlt (  ); _hlt (  ) ; _hlt (  ) ; _hlt (  )
  end

(* Emission of the profiling prelude *)

let emit_profile () =
  match system with
    S_linux_elf | S_gnu ->
      _pushl (  _r EAX  );
      _movl  (   _r ESP , _r EBP   );
      _pushl (  _r ECX  );
      _pushl (  _r EDX  );
      _call (  _l (emit_symbol "mcount")  );
      _movl (   _r ESP , _r EBP   );
      _popl (  _r EDX  );
      _popl (  _r ECX  );
      _popl (  _r EAX  );
  | S_bsd_elf ->
      _pushl (  _r EAX  );
      _movl  (   _r ESP , _r EBP   );
      _pushl (  _r ECX  );
      _pushl (  _r EDX  );
      _call (  _l ".mcount"  );
      _popl (  _r EDX  );
      _popl (  _r ECX  );
      _popl (  _r EAX  );
  | S_macosx ->
      _pushl (  _r EAX  );
      _movl  (   _r ESP , _r EBP   );
      _pushl (  _r ECX  );
      _pushl (  _r EDX  );
      _call (  _l "Lmcount$stub"  );
      _popl (  _r EDX  );
      _popl (  _r ECX  );
      _popl (  _r EAX  );
  | _ -> () (*unsupported yet*)

(* Emission of a function declaration *)

let fundecl fundecl =
  function_name := fundecl.fun_name;
  fastcode_flag := fundecl.fun_fast;
  tailrec_entry_point := new_label();
  stack_offset := 0;
  call_gc_sites := [];
  bound_error_sites := [];
  bound_error_call := 0;
  _text ();
  add_def_symbol fundecl.fun_name;
  emit_align (if system = S_win32 then 4 else 16);
  if system = S_macosx
  && not !Clflags.output_c_object
  && is_generic_function fundecl.fun_name
  then (* PR#4690 *)
    _specific (Printf.sprintf ".private_extern %s"
        (emit_symbol fundecl.fun_name))
  else
    _global ( emit_symbol fundecl.fun_name );
  _llabel (emit_symbol fundecl.fun_name);
  emit_debug_info fundecl.fun_dbg;
  cfi_startproc ();
  if !Clflags.gprofile then emit_profile();
  let n = frame_size() - 4 in
  if n > 0 then
  begin
    _subl (   _int n , _r ESP   );
    cfi_adjust_cfa_offset n;
  end;
  _llabel (emit_label !tailrec_entry_point);
  emit_all true fundecl.fun_body;
  List.iter emit_call_gc !call_gc_sites;
  emit_call_bound_errors ();
  cfi_endproc ();
  begin match system with
    S_linux_elf | S_bsd_elf | S_gnu ->
      _specific (Printf.sprintf
            ".type\t%s,@function" (emit_symbol fundecl.fun_name));
      _specific (Printf.sprintf
           ".size\t%s,.-%s"
           (emit_symbol fundecl.fun_name) (emit_symbol fundecl.fun_name))
  | _ -> () end


(* Emission of data *)

let emit_item = function
    Cglobal_symbol s -> _global ( emit_symbol s )
  | Cdefine_symbol s ->
    add_def_symbol s;
    _label ( emit_symbol s )
  | Cdefine_label lbl -> _label ( emit_data_label lbl )
  | Cint8 n -> _byte (ConstInt n)
  | Cint16 n -> _word (ConstInt n)
  | Cint32 n -> _long ( ConstNat n )
  | Cint n -> _long ( ConstNat n )
  | Csingle f -> assert false
(*      emit_float32_directive ".long" f *)
  | Cdouble f ->  emit_float64_split_directive f
  | Csymbol_address s ->
    add_used_symbol s;
    _long (ConstLabel ( emit_symbol s ))
  | Clabel_address lbl -> _long (ConstLabel ( emit_data_label lbl ))
  | Cstring s -> _ascii s
  | Cskip n ->
      if n > 0 then _space n
  | Calign n ->
      emit_align n

let data l =
  _data ();
  List.iter emit_item l

(* Beginning / end of an assembly file *)

let begin_assembly() =
  arch64 := false;
  init_segments ();
  reset_debug_info();                   (* PR#5603 *)
  float_constants := StringMap.empty;
  if system = S_win32 then begin
    _specific ".386";
    _specific ".MODEL FLAT";
    _extrn "_caml_young_ptr" DWORD;
    _extrn "_caml_young_limit" DWORD;
    _extrn "_caml_exception_pointer" DWORD;
    _extrn "_caml_extra_params" DWORD;
    _extrn "_caml_call_gc" PROC;
    _extrn "_caml_c_call" PROC;
    _extrn "_caml_allocN" PROC;
    _extrn "_caml_alloc1" PROC;
    _extrn "_caml_alloc2" PROC;
    _extrn "_caml_alloc3" PROC;
    _extrn "_caml_ml_array_bound_error" PROC;
    _extrn "_caml_raise_exn" PROC;
    _extrn "_caml_reraise_exn" PROC;
  end;
  let lbl_begin = Compilenv.make_symbol (Some "data_begin") in
  add_def_symbol lbl_begin;
  _data ();
  _global ( emit_symbol lbl_begin );
  _label ( emit_symbol lbl_begin );
  let lbl_begin = Compilenv.make_symbol (Some "code_begin") in
  add_def_symbol lbl_begin;
  _text ();
  _global ( emit_symbol lbl_begin );
  _label ( emit_symbol lbl_begin );
  if system = S_macosx then _nop (  ) (* PR#4690 *)

let end_assembly() =
  if !float_constants <> StringMap.empty then begin
    _data ();
    StringMap.iter emit_float_constant !float_constants
  end;
  let lbl_end = Compilenv.make_symbol (Some "code_end") in
  add_def_symbol lbl_end;
  _text ();
  if system = S_macosx then
    _nop (  ); (* suppress "ld warning: atom sorting error" *)
  _global ( emit_symbol lbl_end );
  _label ( emit_symbol lbl_end );
  _data ();
  let lbl_end = Compilenv.make_symbol (Some "data_end") in
  add_def_symbol lbl_end;
  _global ( emit_symbol lbl_end );
  _label ( emit_symbol lbl_end );
  _long ( ConstInt 0 );
  let lbl = Compilenv.make_symbol (Some "frametable") in
  add_def_symbol lbl;
  _global ( emit_symbol lbl );
  _label ( emit_symbol lbl );
  emit_frames
    { efa_label = (fun l -> _long ( ConstLabel ( emit_label l ) ));
      efa_16 = (fun n -> _word ( ConstInt n ) );
      efa_32 = (fun n -> _long ( Const32 n ));
      efa_word = (fun n -> _long ( ConstInt n ));
      efa_align = emit_align;
      efa_label_rel = (fun lbl ofs ->
        _long (ConstAdd (
            ConstSub( ConstLabel(emit_label lbl), ConstLabel "." ),
            Const32 ofs)));
      efa_def_label = (fun l -> _label ( emit_label l ));
      efa_string = (fun s ->
        let s = s ^ "\000" in
        _ascii s
      ) };
  if system = S_macosx then emit_external_symbols ();
  if system = S_linux_elf then
    (* Mark stack as non-executable, PR#4564 *)
    _specific ".section .note.GNU-stack,\"\",%progbits";

  if system = S_win32 then begin
    _comment "External functions";
    StringSet.iter
      (fun s ->
        if not (StringSet.mem s !symbols_defined) then
          _extrn (emit_symbol s) PROC)
      !symbols_used;
    symbols_used := StringSet.empty;
    symbols_defined := StringSet.empty;
    emit End;
  end;

  let oc = !Emitaux.output_channel in
  let bprint_instr =
    match system with
    | S_win32 | S_win64 -> Intel_masm.bprint_instr
    | _ -> Intel_gas.bprint_instr
  in
  generate_code oc bprint_instr

