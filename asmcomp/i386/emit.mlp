# 2 "asmcomp/i386/emit.mlp"
(***********************************************************************)
(*                                                                     *)
(*                                OCaml                                *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1996 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the Q Public License version 1.0.               *)
(*                                                                     *)
(***********************************************************************)

(* Emission of Intel 386 assembly code *)

open Misc
open Cmm
open Arch
open Proc
open Reg
open Mach
open Linearize
open Emitaux

open Intel_ast
open Intel_proc
open Intel_dsl.DSL32

module I = Intel_dsl.INS32

(* CFI directives *)

let is_cfi_enabled () =
  Config.asm_cfi_supported

let cfi_startproc () =
  if is_cfi_enabled () then
    _cfi_startproc ()

let cfi_endproc () =
  if is_cfi_enabled () then
    _cfi_endproc ()

let cfi_adjust_cfa_offset n =
  if is_cfi_enabled () then
    _cfi_adjust_cfa_offset n

let emit_debug_info dbg =
  if system <> S_win32 then
    emit_debug_info_gen dbg _file _loc

(* Tradeoff between code size and code speed *)

let fastcode_flag = ref true

let stack_offset = ref 0

(* Layout of the stack frame *)

let frame_size () =                     (* includes return address *)
  let sz =
    !stack_offset + 4 * num_stack_slots.(0) + 8 * num_stack_slots.(1) + 4
  in Misc.align sz stack_alignment

let slot_offset loc cl =
  match loc with
    Incoming n ->
      assert (n >= 0);
      frame_size() + n
  | Local n ->
      if cl = 0
      then !stack_offset + n * 4
      else !stack_offset + num_stack_slots.(0) * 4 + n * 8
  | Outgoing n ->
      assert (n >= 0);
      n

(* Record symbols used and defined - at the end generate extern for those
   used but not defined *)

let symbols_defined = ref StringSet.empty
let symbols_used = ref StringSet.empty

let add_def_symbol s =
  symbols_defined := StringSet.add s !symbols_defined

let add_used_symbol s =
  symbols_used := StringSet.add s !symbols_used

let trap_frame_size = Misc.align 8 stack_alignment

(* Prefixing of symbols with "_" *)

let symbol_prefix =
  match system with
    S_linux_elf -> ""
  | S_bsd_elf -> ""
  | S_solaris -> ""
  | S_beos -> ""
  | S_gnu -> ""
  | _ -> "_" (* win32 & others *)

let emit_symbol s =
  string_of_symbol symbol_prefix s

let emit_call s =
  I.call (_l (emit_symbol s))

(* Output a label *)

let label_prefix =
  match system with
    S_linux_elf -> ".L"
  | S_bsd_elf -> ".L"
  | S_solaris -> ".L"
  | S_beos -> ".L"
  | S_gnu -> ".L"
  | _ -> "L"

let emit_label lbl =
  Printf.sprintf "%s%d" label_prefix lbl

let emit_data_label lbl =
  Printf.sprintf "%sd%d" label_prefix lbl

(* MacOSX has its own way to reference symbols potentially defined in
   shared objects *)


(* Output a .align directive.
   The numerical argument to .align is log2 of alignment size, except
   under ELF, where it is the alignment size... *)

let emit_align =
  match system with
    S_linux_elf | S_bsd_elf | S_solaris | S_beos | S_cygwin
  | S_mingw | S_gnu | S_win32 ->
      (fun n -> _align n)
  | _ ->
      (fun n -> _align (Misc.log2 n))

let emit_Llabel fallthrough lbl =
  if not fallthrough && !fastcode_flag then
    emit_align 16 ;
  _llabel (emit_label lbl)

(* Output a pseudo-register *)

let int_reg_name =  [| _eax; _ebx; _ecx; _edx; _esi; _edi; _ebp  |]

let float_reg_name = [| TOS |]

let register_name r =
  if r < 100 then _r (int_reg_name.(r))
  else Regf (float_reg_name.(r - 100))

let emit_reg = function
    { loc = Reg r } -> register_name r
  | { loc = Stack(Incoming n | Outgoing n) } when n < 0 ->
      _mem_sym_x NO (emit_symbol "caml_extra_params") (n + 64)
  | { loc = Stack s; typ = Float } as r ->
      let ofs = slot_offset s (register_class r) in
      _mem_reg REAL8 ofs _esp
  | { loc = Stack s } as r ->
      let ofs = slot_offset s (register_class r) in
      _mem_reg DWORD ofs _esp
  | { loc = Unknown } ->
      fatal_error "Emit_i386.emit_reg"

(* Output a reference to the lower 8 bits or lower 16 bits of a register *)

let reg_low_byte_name = [|  AL; BL; CL; DL |]
let reg_low_half_name = [| AX; BX; CX; DX; SI; DI; BP |]

let emit_reg8 r =
  match r.loc with
    Reg r when r < 4 -> Reg8 (reg_low_byte_name.(r))
  | _ -> fatal_error "Emit_i386.emit_reg8"

let emit_reg16 r =
  match r.loc with
    Reg r when r < 7 -> Reg16 (reg_low_half_name.(r))
  | _ -> fatal_error "Emit_i386.emit_reg16"

let emit_reg32 = function
  | { loc = Reg.Reg r } -> int_reg_name.(r)
  | _ -> assert false

(* Output an addressing mode *)

let emit_addressing addr pref r n =
  match addr with
    Ibased(s, d) ->
      add_used_symbol s;
      _mem_sym_x pref (emit_symbol s) d
  | Iindexed d ->
      _mem_reg pref d (emit_reg32 r.(n))
  | Iindexed2 d ->
      Mem(pref, M32 (Some (emit_reg32 r.(n+1), 1, Some (emit_reg32 r.(n))),
                     (None, Int64.of_int d)))
  | Iscaled(2, d) ->
      Mem(pref, M32 (Some (emit_reg32 r.(n), 1, Some (emit_reg32 r.(n))),
                     (None, Int64.of_int d)))
  | Iscaled(scale, d) ->
      Mem(pref, M32 (Some (emit_reg32 r.(n), scale, None),
                     (None, Int64.of_int d)))
  | Iindexed2scaled(scale, d) ->
      Mem(pref, M32 (Some  (emit_reg32 r.(n+1), scale, Some (emit_reg32 r.(n))),
                     (None, Int64.of_int d)))

(* Record live pointers at call points *)

let record_frame_label live dbg =
  let lbl = new_label() in
  let live_offset = ref [] in
  Reg.Set.iter
    (function
        {typ = Addr; loc = Reg r} ->
          live_offset := ((r lsl 1) + 1) :: !live_offset
      | {typ = Addr; loc = Stack s} as reg ->
          live_offset := slot_offset s (register_class reg) :: !live_offset
      | _ -> ())
    live;
  frame_descriptors :=
    { fd_lbl = lbl;
      fd_frame_size = frame_size();
      fd_live_offset = !live_offset;
      fd_debuginfo = dbg } :: !frame_descriptors;
  lbl

let record_frame live dbg =
  let lbl = record_frame_label live dbg in
  _llabel (emit_label lbl)

(* Record calls to the GC -- we've moved them out of the way *)

type gc_call =
  { gc_lbl: label;                      (* Entry label *)
    gc_return_lbl: label;               (* Where to branch after GC *)
    gc_frame: label }                   (* Label of frame descriptor *)

let call_gc_sites = ref ([] : gc_call list)

let emit_call_gc gc =
  _llabel (emit_label gc.gc_lbl);
  emit_call "caml_call_gc";
  _llabel (emit_label gc.gc_frame);
  I.jmp (_l (emit_label gc.gc_return_lbl))

(* Record calls to caml_ml_array_bound_error.
   In -g mode, we maintain one call to caml_ml_array_bound_error
   per bound check site.  Without -g, we can share a single call. *)

type bound_error_call =
  { bd_lbl: label;                      (* Entry label *)
    bd_frame: label }                   (* Label of frame descriptor *)

let bound_error_sites = ref ([] : bound_error_call list)
let bound_error_call = ref 0

let bound_error_label dbg =
  if !Clflags.debug then begin
    let lbl_bound_error = new_label() in
    let lbl_frame = record_frame_label Reg.Set.empty dbg in
    bound_error_sites :=
      { bd_lbl = lbl_bound_error; bd_frame = lbl_frame } :: !bound_error_sites;
    lbl_bound_error
  end else begin
    if !bound_error_call = 0 then bound_error_call := new_label();
    !bound_error_call
  end

let emit_call_bound_error bd =
  _llabel (emit_label bd.bd_lbl);
  emit_call "caml_ml_array_bound_error";
  _llabel (emit_label bd.bd_frame)

let emit_call_bound_errors () =
  List.iter emit_call_bound_error !bound_error_sites;
  if !bound_error_call > 0 then begin
    _llabel (emit_label !bound_error_call);
    emit_call "caml_ml_array_bound_error"
  end

(* Names for instructions *)

let instr_for_intop = function
    Iadd -> I.addl
  | Isub -> I.subl
  | Imul -> (fun (arg1,arg2) ->  I.imull (arg1, Some arg2))
  | Iand -> I.andl
  | Ior -> I.orl
  | Ixor -> I.xorl
  | Ilsl -> I.sall
  | Ilsr -> I.shrl
  | Iasr -> I.sarl
  | _ -> fatal_error "Emit_i386: instr_for_intop"

let unary_instr_for_floatop = function
  | Inegf -> I.fchs ()
  | Iabsf -> I.fabs ()
  | _ -> fatal_error "Emit_i386: unary_instr_for_floatop"

let instr_for_floatop = function
  | Iaddf -> I.faddl
  | Isubf -> I.fsubl
  | Imulf -> I.fmull
  | Idivf -> I.fdivl
  | Ispecific Isubfrev -> I.fsubrl
  | Ispecific Idivfrev -> I.fdivrl
  | _ -> fatal_error "Emit_i386: instr_for_floatop"

let instr_for_floatop_reversed = function
  | Iaddf -> I.faddl
  | Isubf -> I.fsubrl
  | Imulf -> I.fmull
  | Idivf -> I.fdivrl
  | Ispecific Isubfrev -> I.fsubl
  | Ispecific Idivfrev -> I.fdivl
  | _ -> fatal_error "Emit_i386: instr_for_floatop_reversed"

let instr_for_floatop_pop = function
  | Iaddf -> I.faddp
  | Isubf -> I.fsubp
  | Imulf -> I.fmulp
  | Idivf -> I.fdivp
  | Ispecific Isubfrev -> I.fsubrp
  | Ispecific Idivfrev -> I.fdivrp
  | _ -> fatal_error "Emit_i386: instr_for_floatop_pop"

let instr_for_floatarithmem double = function
  | Ifloatadd -> if double then I.faddl else I.fadds
  | Ifloatsub -> if double then I.fsubl else I.fsubs
  | Ifloatsubrev -> if double then I.fsubrl else I.fsubrs
  | Ifloatmul -> if double then I.fmull else I.fmuls
  | Ifloatdiv -> if double then I.fdivl else I.fdivs
  | Ifloatdivrev -> if double then I.fdivrl else I.fdivrs

let name_for_cond_branch = function
  | Isigned Ceq   -> E   | Isigned Cne   -> NE
  | Isigned Cle   -> LE  | Isigned Cgt   -> G
  | Isigned Clt   -> L   | Isigned Cge   -> GE
  | Iunsigned Ceq -> E   | Iunsigned Cne -> NE
  | Iunsigned Cle -> BE  | Iunsigned Cgt -> A
  | Iunsigned Clt -> B   | Iunsigned Cge -> AE

(* Output an = 0 or <> 0 test. *)

let output_test_zero arg =
  match arg.loc with
    Reg.Reg r -> I.testl  (emit_reg arg, emit_reg arg (* rev *))
  | _  -> I.cmpl  (int 0, emit_reg arg (* rev *))

(* Deallocate the stack frame before a return or tail call *)

let output_epilogue f =
  let n = frame_size() - 4 in
  if n > 0 then
    begin
      I.addl (int n, _r _esp);
      cfi_adjust_cfa_offset (-n);
      f ();
      (* reset CFA back cause function body may continue *)
      cfi_adjust_cfa_offset n
    end
  else
    f ()

(* Determine if the given register is the top of the floating-point stack *)

let is_tos = function { loc = Reg _; typ = Float } -> true | _ -> false

(* Emit the code for a floating-point comparison *)

let emit_float_test cmp neg arg lbl =
  let actual_cmp =
    match (is_tos arg.(0), is_tos arg.(1)) with
      (true, true) ->
        (* both args on top of FP stack *)
        I.fcompp ();
        cmp
    | (true, false) ->
        (* first arg on top of FP stack *)
        I.fcompl (emit_reg arg.(1));
        cmp
    | (false, true) ->
        (* second arg on top of FP stack *)
        I.fcompl (emit_reg arg.(0));
        Cmm.swap_comparison cmp
    | (false, false) ->
        I.fldl    (emit_reg arg.(0));
        I.fcompl  (emit_reg arg.(1));
        cmp
  in
  I.fnstsw (Reg16 AX);
  begin match actual_cmp with
    Ceq ->
      if neg then begin
        I.andb (int 68 , Reg8 AH);
        I.xorb (int 64 , Reg8 AH);
        I.jne
      end else begin
        I.andb (int 69 , Reg8 AH);
        I.cmpb (int 64 , Reg8 AH);
        I.je
      end
  | Cne ->
      if neg then begin
        I.andb (int 69 , Reg8 AH);
        I.cmpb (int 64 , Reg8 AH);
        I.je
      end else begin
        I.andb (int 68 , Reg8 AH);
        I.xorb (int 64 , Reg8 AH);
        I.jne
      end
  | Cle ->
      I.andb (int 69 , Reg8 AH);
      I.decb (Reg8 AH);
      I.cmpb (int 64 , Reg8 AH);
      if neg
      then I.jae
      else I.jb
  | Cge ->
      I.andb (int 5 , Reg8 AH);
      if neg
      then I.jne
      else I.je
  | Clt ->
      I.andb (int 69 , Reg8 AH);
      I.cmpb (int 1 , Reg8 AH);
      if neg
      then I.jne
      else I.je
  | Cgt ->
      I.andb (int 69 , Reg8 AH);
      if neg
      then I.jne
      else I.je
  end
    (_l (emit_label lbl))

(* Emit a Ifloatspecial instruction *)

let emit_floatspecial = function
    "atan"  -> I.fld1 (); I.fpatan ()
  | "atan2" -> I.fpatan ()
  | "cos"   -> I.fcos ()
  | "log"   -> I.fldln2 (); I.fxch (_st 1); I.fyl2x ()
  | "log10" -> I.fldlg2 (); I.fxch (_st 1); I.fyl2x ()
  | "sin"   -> I.fsin ()
  | "sqrt"  -> I.fsqrt ()
  | "tan"   -> I.fptan (); I.fstp (Regf (ST 0)) (* %st(0) *)
  | _ -> assert false

(* Floating-point constants *)

let float_constants = ref ([] : (int64 * int) list)

let add_float_constant cst =
  let repr = Int64.bits_of_float cst in
  try
    List.assoc repr !float_constants
  with
    Not_found ->
      let lbl = new_label() in
      float_constants := (repr, lbl) :: !float_constants;
      lbl

let emit_float64_split_directive x =
  let lo = Int64.logand x 0xFFFF_FFFFL
  and hi = Int64.shift_right_logical x 32 in
  _long (Const (B32, if Arch.big_endian then hi else lo));
  _long (Const (B32, if Arch.big_endian then lo else hi));
  ()

let emit_float_constant cst lbl =
  _label (emit_label lbl);
  emit_float64_split_directive cst

(* Output the assembly code for an instruction *)

(* Name of current function *)
let function_name = ref ""
(* Entry point for tail recursive calls *)
let tailrec_entry_point = ref 0
(* Label of trap for out-of-range accesses *)
let range_check_trap = ref 0
(* Record references to external C functions (for MacOSX) *)
let external_symbols_direct = ref StringSet.empty
let external_symbols_indirect = ref StringSet.empty

let emit_instr fallthrough i =
  emit_debug_info i.dbg;
  match i.desc with
    Lend -> ()
  | Lop(Imove | Ispill | Ireload) ->
      let src = i.arg.(0) and dst = i.res.(0) in
      if src.loc <> dst.loc then begin
        if src.typ = Float then
          if is_tos src then
            I.fstpl (emit_reg dst)
          else if is_tos dst then
            I.fldl (emit_reg src)
          else begin
            I.fldl  (emit_reg src);
            I.fstpl (emit_reg dst)
          end
        else
          I.movl (emit_reg src , emit_reg dst)
      end
  | Lop(Iconst_int n | Iconst_blockheader n) ->
      if n = 0n then begin
        match i.res.(0).loc with
          Reg n -> I.xorl (emit_reg i.res.(0) , emit_reg i.res.(0))
        | _     -> I.movl (int 0 , emit_reg i.res.(0))
      end else
        I.movl (emit_nat n , emit_reg i.res.(0))
  | Lop(Iconst_float f) ->
      begin match Int64.bits_of_float f with
      | 0x0000_0000_0000_0000L ->       (* +0.0 *)
          I.fldz ()
      | 0x8000_0000_0000_0000L ->       (* -0.0 *)
          I.fldz (); I.fchs ()
      | 0x3FF0_0000_0000_0000L ->       (*  1.0 *)
          I.fld1 ()
      | 0xBFF0_0000_0000_0000L ->       (* -1.0 *)
          I.fld1 (); I.fchs ()
      | _ ->
          let lbl = add_float_constant f in
          I.fldl (_mem_sym (emit_label lbl))
      end
  | Lop(Iconst_symbol s) ->
      add_used_symbol s;
      I.movl (_offset (abs_ (emit_symbol s)) , emit_reg i.res.(0))
  | Lop(Icall_ind) ->
      I.call (emit_reg i.arg.(0));
      record_frame i.live i.dbg
  | Lop(Icall_imm s) ->
      add_used_symbol s;
      I.call (_l (emit_symbol s));
      record_frame i.live i.dbg
  | Lop(Itailcall_ind) ->
      output_epilogue begin fun () ->
        I.jmp (emit_reg i.arg.(0))
      end
  | Lop(Itailcall_imm s) ->
      if s = !function_name then
        I.jmp (_l (emit_label !tailrec_entry_point))
      else begin
        output_epilogue begin fun () ->
          add_used_symbol s;
          I.jmp (_l (emit_symbol s))
        end
      end
  | Lop(Iextcall(s, alloc)) ->
      add_used_symbol s;
      if alloc then begin
        if system <> S_macosx then
          I.movl (_offset (abs_ (emit_symbol s)) , _r _eax)
        else begin
          external_symbols_indirect :=
            StringSet.add s !external_symbols_indirect;
          I.movl (_mem_sym (Printf.sprintf "L%s$non_lazy_ptr"
                              (emit_symbol s)) , _r _eax)
        end;
        emit_call "caml_c_call";
        record_frame i.live i.dbg
      end else begin
        if system <> S_macosx then
          emit_call s
        else begin
          external_symbols_direct :=
            StringSet.add s !external_symbols_direct;
          I.call (_l (Printf.sprintf "L%s$stub" (emit_symbol s)))
        end
      end
  | Lop(Istackoffset n) ->
      if n < 0
      then I.addl (int (-n), _r _esp)
      else I.subl (int n, _r _esp);
      cfi_adjust_cfa_offset n;
      stack_offset := !stack_offset + n
  | Lop(Iload(chunk, addr)) ->
      let dest = i.res.(0) in
      begin match chunk with
      | Word | Thirtytwo_signed | Thirtytwo_unsigned ->
          I.movl (emit_addressing addr DWORD i.arg 0 , emit_reg dest)
      | Byte_unsigned ->
          I.movzbl (emit_addressing addr BYTE i.arg 0 , emit_reg dest)
      | Byte_signed ->
          I.movsbl (emit_addressing addr BYTE i.arg 0 , emit_reg dest)
      | Sixteen_unsigned ->
          I.movzwl (emit_addressing addr WORD i.arg 0 , emit_reg dest)
      | Sixteen_signed ->
          I.movswl (emit_addressing addr WORD i.arg 0 , emit_reg dest)
      | Single ->
          I.flds (emit_addressing addr REAL4 i.arg 0)
      | Double | Double_u ->
          I.fldl (emit_addressing addr REAL8 i.arg 0)
      end
  | Lop(Istore(chunk, addr, _)) ->
      begin match chunk with
      | Word | Thirtytwo_signed | Thirtytwo_unsigned ->
          I.movl (emit_reg i.arg.(0) , emit_addressing addr DWORD i.arg 1)
      | Byte_unsigned | Byte_signed ->
          I.movb (emit_reg8 i.arg.(0) , emit_addressing addr BYTE i.arg 1)
      | Sixteen_unsigned | Sixteen_signed ->
          I.movw (emit_reg16 i.arg.(0) , emit_addressing addr WORD i.arg 1)
      | Single ->
          if is_tos i.arg.(0) then
            I.fstps (emit_addressing addr REAL4 i.arg 1)
          else begin
            I.fldl (emit_reg i.arg.(0));
            I.fstps (emit_addressing addr REAL4 i.arg 1)
          end
      | Double | Double_u ->
          if is_tos i.arg.(0) then
            I.fstpl (emit_addressing addr REAL8 i.arg 1)
          else begin
            I.fldl (emit_reg i.arg.(0));
            I.fstpl (emit_addressing addr REAL8 i.arg 1)
          end
      end
  | Lop(Ialloc n) ->
      if !fastcode_flag then begin
        let lbl_redo = new_label() in
        _llabel (emit_label lbl_redo);
        I.movl (_mem_sym (emit_symbol "caml_young_ptr") , _r _eax);
        I.subl (int n , _r _eax);
        I.movl (_r _eax , _mem_sym (emit_symbol "caml_young_ptr"));
        I.cmpl (_mem_sym (emit_symbol "caml_young_limit") , _r _eax);
        let lbl_call_gc = new_label() in
        let lbl_frame = record_frame_label i.live Debuginfo.none in
        I.jb (_l (emit_label lbl_call_gc));
        I.leal  (_mem_reg NO 4 _eax , emit_reg i.res.(0));
        call_gc_sites :=
          { gc_lbl = lbl_call_gc;
            gc_return_lbl = lbl_redo;
            gc_frame = lbl_frame } :: !call_gc_sites
      end else begin
        begin match n with
          8  -> emit_call "caml_alloc1"
        | 12 -> emit_call "caml_alloc2"
        | 16 -> emit_call "caml_alloc3"
        | _  ->
            I.movl (int n , _r _eax);
            emit_call "caml_allocN"
        end;
        record_frame i.live Debuginfo.none;
        I.leal (_mem_reg NO 4 _eax , emit_reg i.res.(0))
      end
  | Lop(Iintop(Icomp cmp)) ->
      I.cmpl (emit_reg i.arg.(1) , emit_reg i.arg.(0));
      let b = name_for_cond_branch cmp in
      I.set b (Reg8 AL);
      I.movzbl (Reg8 AL , emit_reg i.res.(0));
  | Lop(Iintop_imm(Icomp cmp, n)) ->
      I.cmpl (int n , emit_reg i.arg.(0));
      let b = name_for_cond_branch cmp in
      I.set b (Reg8 AL);
      I.movzbl (Reg8 AL , emit_reg i.res.(0))
  | Lop(Iintop Icheckbound) ->
      let lbl = bound_error_label i.dbg in
      I.cmpl (emit_reg i.arg.(1) , emit_reg i.arg.(0));
      I.jbe (_l (emit_label lbl))
  | Lop(Iintop_imm(Icheckbound, n)) ->
      let lbl = bound_error_label i.dbg in
      I.cmpl (int n , emit_reg i.arg.(0));
      I.jbe (_l (emit_label lbl))
  | Lop(Iintop(Idiv | Imod)) ->
      I.cltd ();
      I.idivl (emit_reg i.arg.(1))
  | Lop(Iintop(Ilsl | Ilsr | Iasr as op)) ->
      (* We have i.arg.(0) = i.res.(0) and i.arg.(1) = %ecx *)
      instr_for_intop op (Reg8 CL , emit_reg i.res.(0))
  | Lop(Iintop Imulh) ->
      I.imull (emit_reg i.arg.(1), None)
  | Lop(Iintop op) ->
      (* We have i.arg.(0) = i.res.(0) *)
      instr_for_intop op (emit_reg i.arg.(1) , emit_reg i.res.(0))
  | Lop(Iintop_imm(Iadd, n)) when i.arg.(0).loc <> i.res.(0).loc ->
      I.leal (_mem_reg NO n (emit_reg32 i.arg.(0)), emit_reg i.res.(0))
  | Lop(Iintop_imm(Iadd, 1) | Iintop_imm(Isub, -1)) ->
      I.incl (emit_reg i.res.(0))
  | Lop(Iintop_imm(Iadd, -1) | Iintop_imm(Isub, 1)) ->
      I.decl (emit_reg i.res.(0))
  | Lop(Iintop_imm(op, n)) ->
      (* We have i.arg.(0) = i.res.(0) *)
      instr_for_intop op (int n , emit_reg i.res.(0))
  | Lop(Inegf | Iabsf as floatop) ->
      if not (is_tos i.arg.(0)) then
        I.fldl (emit_reg i.arg.(0));
      unary_instr_for_floatop floatop
  | Lop(Iaddf | Isubf | Imulf | Idivf | Ispecific(Isubfrev | Idivfrev)
        as floatop) ->
      begin match (is_tos i.arg.(0), is_tos i.arg.(1)) with
        (true, true) ->
          (* both operands on top of FP stack *)
          instr_for_floatop_pop floatop (Regf (ST 0) , Regf (ST 1))
      | (true, false) ->
          (* first operand on stack *)
          instr_for_floatop floatop (emit_reg i.arg.(1))
      | (false, true) ->
          (* second operand on stack *)
          instr_for_floatop_reversed floatop (emit_reg i.arg.(0))
      | (false, false) ->
          (* both operands in memory *)
          I.fldl (emit_reg i.arg.(0));
          instr_for_floatop floatop (emit_reg i.arg.(1))
      end
  | Lop(Ifloatofint) ->
      begin match i.arg.(0).loc with
        Stack s ->
          I.fildl (emit_reg i.arg.(0))
      | _ ->
          I.pushl (emit_reg i.arg.(0));
          I.fildl (_mem_reg DWORD 0 _esp);
          I.addl (int 4 , _r _esp)
      end
  | Lop(Iintoffloat) ->
      if not (is_tos i.arg.(0)) then
        I.fldl (emit_reg i.arg.(0));
      stack_offset := !stack_offset - 8;
      I.subl (int 8 , _r _esp);
      cfi_adjust_cfa_offset 8;
      I.fnstcw (_mem_reg NO 4 _esp);
      I.movw (_mem_reg NO 4 _esp , Reg16 AX);
      I.movb (int 12 , Reg8 AH);
      I.movw (Reg16 AX , _mem_reg NO 0 _esp);
      I.fldcw (_mem_reg NO 0 _esp);
      begin match i.res.(0).loc with
        Stack s ->
          I.fistpl (emit_reg i.res.(0))
      | _ ->
          I.fistpl (_mem_reg DWORD 0 _esp);
          I.movl (_mem_reg NO 0 _esp , emit_reg i.res.(0))
      end;
      I.fldcw (_mem_reg NO 4 _esp);
      I.addl (int 8 , _r _esp);
      cfi_adjust_cfa_offset (-8);
      stack_offset := !stack_offset + 8
  | Lop(Ispecific(Ilea addr)) ->
      I.leal (emit_addressing addr DWORD i.arg 0 , emit_reg i.res.(0))
  | Lop(Ispecific(Istore_int(n, addr, _))) ->
      I.movl (emit_nat n , emit_addressing addr DWORD i.arg 0)
  | Lop(Ispecific(Istore_symbol(s, addr, _))) ->
      add_used_symbol s;
      I.movl (_offset (abs_ (emit_symbol s)) , emit_addressing addr DWORD i.arg 0)
  | Lop(Ispecific(Ioffset_loc(n, addr))) ->
      I.addl (int n , emit_addressing addr DWORD i.arg 0)
  | Lop(Ispecific(Ipush)) ->
      (* Push arguments in reverse order *)
      for n = Array.length i.arg - 1 downto 0 do
        let r = i.arg.(n) in
        match r with
          {loc = Reg _; typ = Float} ->
            I.subl (int 8 , _r _esp);
            cfi_adjust_cfa_offset 8;
            I.fstpl (_mem_reg REAL8 0 _esp);
            stack_offset := !stack_offset + 8
        | {loc = Stack sl; typ = Float} ->
            let ofs = slot_offset sl 1 in
            I.pushl (_mem_reg DWORD (ofs + 4) _esp);
            I.pushl (_mem_reg DWORD (ofs + 4) _esp);
            cfi_adjust_cfa_offset 8;
            stack_offset := !stack_offset + 8
        | _ ->
            I.pushl (emit_reg r);
            cfi_adjust_cfa_offset 4;
            stack_offset := !stack_offset + 4
      done
  | Lop(Ispecific(Ipush_int n)) ->
      I.pushl (emit_nat n);
      cfi_adjust_cfa_offset 4;
      stack_offset := !stack_offset + 4
  | Lop(Ispecific(Ipush_symbol s)) ->
      add_used_symbol s;
      I.pushl (_offset (abs_ (emit_symbol s)));
      cfi_adjust_cfa_offset 4;
      stack_offset := !stack_offset + 4
  | Lop(Ispecific(Ipush_load addr)) ->
      I.pushl (emit_addressing addr DWORD i.arg 0);
      cfi_adjust_cfa_offset 4;
      stack_offset := !stack_offset + 4
  | Lop(Ispecific(Ipush_load_float addr)) ->
      I.pushl (emit_addressing (offset_addressing addr 4) DWORD i.arg 0);
      I.pushl (emit_addressing addr DWORD i.arg 0);
      cfi_adjust_cfa_offset 8;
      stack_offset := !stack_offset + 8
  | Lop(Ispecific(Ifloatarithmem(double, op, addr))) ->
      if not (is_tos i.arg.(0)) then
        I.fldl (emit_reg i.arg.(0));
      instr_for_floatarithmem double op
          (emit_addressing addr
             (if double then REAL8 else REAL4) i.arg 1)
  | Lop(Ispecific(Ifloatspecial s)) ->
      (* Push args on float stack if necessary *)
      for k = 0 to Array.length i.arg - 1 do
        if not (is_tos i.arg.(k)) then I.fldl (emit_reg i.arg.(k))
      done;
      (* Fix-up for binary instrs whose args were swapped *)
      if Array.length i.arg = 2 && is_tos i.arg.(1) then
        I.fxch (_st 1);
      emit_floatspecial s
  | Lreloadretaddr ->
      ()
  | Lreturn ->
      output_epilogue begin fun () ->
        I.ret ()
      end
  | Llabel lbl ->
      emit_Llabel fallthrough lbl
  | Lbranch lbl ->
      I.jmp (_l(emit_label lbl))
  | Lcondbranch(tst, lbl) ->
      begin match tst with
        Itruetest ->
          output_test_zero i.arg.(0);
          I.jne (_l (emit_label lbl));
      | Ifalsetest ->
          output_test_zero i.arg.(0);
          I.je (_l (emit_label lbl))
      | Iinttest cmp ->
          I.cmpl (emit_reg i.arg.(1) , emit_reg i.arg.(0));
          let b = name_for_cond_branch cmp in
          I.j b (_l (emit_label lbl))
      | Iinttest_imm((Isigned Ceq | Isigned Cne |
                      Iunsigned Ceq | Iunsigned Cne) as cmp, 0) ->
          output_test_zero i.arg.(0);
          let b = name_for_cond_branch cmp in
          I.j b (_l (emit_label lbl))
      | Iinttest_imm(cmp, n) ->
          I.cmpl (int n , emit_reg i.arg.(0));
          let b = name_for_cond_branch cmp in
          I.j b (_l (emit_label lbl))
      | Ifloattest(cmp, neg) ->
          emit_float_test cmp neg i.arg lbl
      | Ioddtest ->
          I.testl (int 1 , emit_reg i.arg.(0));
          I.jne (_l (emit_label lbl))
      | Ieventest ->
          I.testl (int 1 , emit_reg i.arg.(0));
          I.je (_l (emit_label lbl))
      end
  | Lcondbranch3(lbl0, lbl1, lbl2) ->
      I.cmpl (int 1 , emit_reg i.arg.(0));
      begin match lbl0 with
        None -> ()
      | Some lbl -> I.jb (_l (emit_label lbl))
      end;
      begin match lbl1 with
        None -> ()
      | Some lbl -> I.je (_l (emit_label lbl))
      end;
      begin match lbl2 with
        None -> ()
      | Some lbl -> I.jg (_l (emit_label lbl))
      end
  | Lswitch jumptbl ->
      let lbl = new_label() in
      I.jmp (Mem(NO, M32 (Some (emit_reg32 i.arg.(0), 4, None),
                          (Some (emit_label lbl, None), 0L))));
      _data ();
      _label (emit_label lbl);
      for i = 0 to Array.length jumptbl - 1 do
        _long (ConstLabel (emit_label jumptbl.(i), None))
      done;
      _text ()
  | Lsetuptrap lbl ->
      I.call (_l (emit_label lbl))
  | Lpushtrap ->
      if trap_frame_size > 8 then
        I.subl (int (trap_frame_size - 8) , _r _esp);
      I.pushl (_mem_sym (emit_symbol "caml_exception_pointer"));
      cfi_adjust_cfa_offset trap_frame_size;
      I.movl (_r _esp , _mem_sym (emit_symbol "caml_exception_pointer"));
      stack_offset := !stack_offset + trap_frame_size
  | Lpoptrap ->
      I.popl (_mem_sym (emit_symbol "caml_exception_pointer"));
      I.addl (int (trap_frame_size - 4) , _r _esp);
      cfi_adjust_cfa_offset (-trap_frame_size);
      stack_offset := !stack_offset - trap_frame_size
  | Lraise k  ->
      begin match !Clflags.debug, k with
      | true, Lambda.Raise_regular ->
          emit_call "caml_raise_exn";
          record_frame Reg.Set.empty i.dbg
      | true, Lambda.Raise_reraise ->
          emit_call "caml_reraise_exn";
          record_frame Reg.Set.empty i.dbg
      | false, _
      | true, Lambda.Raise_notrace ->
          I.movl (_mem_sym (emit_symbol "caml_exception_pointer") , _r _esp);
          I.popl (_mem_sym (emit_symbol "caml_exception_pointer"));
          if trap_frame_size > 8 then
            I.addl (int (trap_frame_size - 8) , _r _esp);
          I.ret ()
      end

let rec emit_all fallthrough i =
  match i.desc with
  |  Lend -> ()
  | _ ->
      emit_instr fallthrough i;
      emit_all
        (system = S_win32 || Linearize.has_fallthrough i.desc)
        i.next

(* Emission of external symbol references (for MacOSX) *)

let emit_external_symbol_direct s =
  _label (Printf.sprintf "L%s$stub" (emit_symbol s));
  _indirect_symbol (emit_symbol s);
  I.hlt (); I.hlt (); I.hlt (); I.hlt () ; I.hlt ()

let emit_external_symbol_indirect s =
  _label (Printf.sprintf "L%s$non_lazy_ptr" (emit_symbol s));
  _indirect_symbol (emit_symbol s);
  _long (const 0)

let emit_external_symbols () =
  _section [ "__IMPORT"; "__pointers"] None ["non_lazy_symbol_pointers" ];
  StringSet.iter emit_external_symbol_indirect !external_symbols_indirect;
  external_symbols_indirect := StringSet.empty;
  _section [ "__IMPORT"; "__jump_table"] None
    [ "symbol_stubs"; "self_modifying_code+pure_instructions"; "5" ];
  StringSet.iter emit_external_symbol_direct !external_symbols_direct;
  external_symbols_direct := StringSet.empty;
  if !Clflags.gprofile then begin
    _label "Lmcount$stub";
    _indirect_symbol "mcount";
    I.hlt (); I.hlt (); I.hlt () ; I.hlt () ; I.hlt ()
  end

(* Emission of the profiling prelude *)

let emit_profile () =
  match system with
    S_linux_elf | S_gnu ->
      I.pushl (_r _eax);
      I.movl  (_r _esp , _r _ebp);
      I.pushl (_r _ecx);
      I.pushl (_r _edx);
      I.call (_l (emit_symbol "mcount"));
      I.movl (_r _esp , _r _ebp);
      I.popl (_r _edx);
      I.popl (_r _ecx);
      I.popl (_r _eax);
  | S_bsd_elf ->
      I.pushl (_r _eax);
      I.movl  (_r _esp , _r _ebp);
      I.pushl (_r _ecx);
      I.pushl (_r _edx);
      I.call (_l ".mcount");
      I.popl (_r _edx);
      I.popl (_r _ecx);
      I.popl (_r _eax);
  | S_macosx ->
      I.pushl (_r _eax);
      I.movl  (_r _esp , _r _ebp);
      I.pushl (_r _ecx);
      I.pushl (_r _edx);
      I.call (_l "Lmcount$stub");
      I.popl (_r _edx);
      I.popl (_r _ecx);
      I.popl (_r _eax);
  | _ -> () (*unsupported yet*)

(* Emission of a function declaration *)

let fundecl fundecl =
  function_name := fundecl.fun_name;
  fastcode_flag := fundecl.fun_fast;
  tailrec_entry_point := new_label();
  stack_offset := 0;
  call_gc_sites := [];
  bound_error_sites := [];
  bound_error_call := 0;
  _text ();
  add_def_symbol fundecl.fun_name;
  emit_align (if system = S_win32 then 4 else 16);
  if system = S_macosx
  && not !Clflags.output_c_object
  && is_generic_function fundecl.fun_name
  then (* PR#4690 *)
    _private_extern (emit_symbol fundecl.fun_name)
  else
    _global (emit_symbol fundecl.fun_name);
  _llabel (emit_symbol fundecl.fun_name);
  emit_debug_info fundecl.fun_dbg;
  cfi_startproc ();
  if !Clflags.gprofile then emit_profile();
  let n = frame_size() - 4 in
  if n > 0 then
    begin
      I.subl (int n , _r _esp);
      cfi_adjust_cfa_offset n;
    end;
  _llabel (emit_label !tailrec_entry_point);
  emit_all true fundecl.fun_body;
  List.iter emit_call_gc !call_gc_sites;
  emit_call_bound_errors ();
  cfi_endproc ();
  begin match system with
    S_linux_elf | S_bsd_elf | S_gnu ->
      _type  (emit_symbol fundecl.fun_name) "@function";
      _size (emit_symbol fundecl.fun_name)
        (ConstSub (
            ConstLabel (".", None),
            ConstLabel  (emit_symbol fundecl.fun_name, None)))
  | _ -> () end


(* Emission of data *)

let emit_item = function
    Cglobal_symbol s -> _global (emit_symbol s)
  | Cdefine_symbol s ->
      add_def_symbol s;
      _label (emit_symbol s)
  | Cdefine_label lbl -> _label (emit_data_label lbl)
  | Cint8 n -> _byte (const n)
  | Cint16 n -> _word (const n)
  | Cint32 n -> _long (const_nat n)
  | Cint n -> _long (const_nat n)
  | Csingle f ->
      _long (Const (B32, Int64.of_int32 (Int32.bits_of_float f)))
  | Cdouble f ->
      emit_float64_split_directive (Int64.bits_of_float f)
  | Csymbol_address s ->
      add_used_symbol s;
      _long (ConstLabel (emit_symbol s, None))
  | Clabel_address lbl -> _long (ConstLabel (emit_data_label lbl, None))
  | Cstring s -> _ascii s
  | Cskip n ->
      if n > 0 then _space n
  | Calign n ->
      emit_align n

let data l =
  _data ();
  List.iter emit_item l

(* Beginning / end of an assembly file *)

let begin_assembly() =
  Intel_proc.reset_asm_code ();
  reset_debug_info();                   (* PR#5603 *)
  float_constants := [];
  if system = S_win32 then begin
    _386 ();
    _model "FLAT";
    _extrn "_caml_young_ptr" DWORD;
    _extrn "_caml_young_limit" DWORD;
    _extrn "_caml_exception_pointer" DWORD;
    _extrn "_caml_extra_params" DWORD;
    _extrn "_caml_call_gc" PROC;
    _extrn "_caml_c_call" PROC;
    _extrn "_caml_allocN" PROC;
    _extrn "_caml_alloc1" PROC;
    _extrn "_caml_alloc2" PROC;
    _extrn "_caml_alloc3" PROC;
    _extrn "_caml_ml_array_bound_error" PROC;
    _extrn "_caml_raise_exn" PROC;
    _extrn "_caml_reraise_exn" PROC;
  end;
  let lbl_begin = Compilenv.make_symbol (Some "data_begin") in
  add_def_symbol lbl_begin;
  _data ();
  _global (emit_symbol lbl_begin);
  _label (emit_symbol lbl_begin);
  let lbl_begin = Compilenv.make_symbol (Some "code_begin") in
  add_def_symbol lbl_begin;
  _text ();
  _global (emit_symbol lbl_begin);
  _label (emit_symbol lbl_begin);
  if system = S_macosx then I.nop () (* PR#4690 *)

let end_assembly() =
  if !float_constants <> [] then begin
    _data ();
    List.iter (fun (cst,lbl) -> emit_float_constant cst lbl) !float_constants
  end;
  let lbl_end = Compilenv.make_symbol (Some "code_end") in
  add_def_symbol lbl_end;
  _text ();
  if system = S_macosx then
    I.nop (); (* suppress "ld warning: atom sorting error" *)
  _global (emit_symbol lbl_end);
  _label (emit_symbol lbl_end);
  _data ();
  let lbl_end = Compilenv.make_symbol (Some "data_end") in
  add_def_symbol lbl_end;
  _global (emit_symbol lbl_end);
  _label (emit_symbol lbl_end);
  _long (const 0);
  let lbl = Compilenv.make_symbol (Some "frametable") in
  add_def_symbol lbl;
  _global (emit_symbol lbl);
  _label (emit_symbol lbl);
  emit_frames
    { efa_label = (fun l -> _long (ConstLabel (emit_label l, None)));
      efa_16 = (fun n -> _word (const n));
      efa_32 = (fun n -> _long (const_32 n));
      efa_word = (fun n -> _long (const n));
      efa_align = emit_align;
      efa_label_rel = (fun lbl ofs ->
          _long (ConstAdd (
              ConstSub(ConstLabel(emit_label lbl, None),
                       ConstLabel (".", None)),
              const_32 ofs)));
      efa_def_label = (fun l -> _label (emit_label l));
      efa_string = (fun s ->
          let s = s ^ "\000" in
          _ascii s
        ) };
  if system = S_macosx then emit_external_symbols ();
  if system = S_linux_elf then
    (* Mark stack as non-executable, PR#4564 *)
    _section [".note.GNU-stack"] (Some "") ["%progbits"];

  if system = S_win32 then begin
    _comment "External functions";
    StringSet.iter
      (fun s ->
         if not (StringSet.mem s !symbols_defined) then
           _extrn (emit_symbol s) PROC)
      !symbols_used;
    symbols_used := StringSet.empty;
    symbols_defined := StringSet.empty;
    _end ();
  end;

  let asm =
    if !Emitaux.create_asm_file then
      Some
        (!Emitaux.output_channel,
         if Intel_proc.masm then Intel_masm.bprint_instr
         else Intel_gas.bprint_instr
        )
    else
      None
  in
  Intel_proc.generate_code asm
